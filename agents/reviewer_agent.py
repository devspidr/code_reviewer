# agents/reviewer_agent.py
import json
from core.base_agent import BaseAgent

class ReviewerAgent(BaseAgent):
    """
    Agent that uses AI logic to review the analysis report
    and generate human-readable feedback.
    """

    def run(self, report_path: str):
        """Read the analysis report and generate review summary."""
        try:
            with open(report_path, "r", encoding="utf-8") as f:
                report = json.load(f)

            print(f"[ReviewerAgent] Reviewing report: {report_path}")

            # Simulated AI review logic (no real API call yet)
            issues = report.get("issues", [])
            issue_count = len(issues)

            feedback = {
                "summary": f"The code was analyzed and {issue_count} issues were found.",
                "quality_score": max(0, 100 - issue_count * 5),
                "suggestions": [
                    "Add descriptive docstrings for all classes and methods.",
                    "Remove unused imports and redundant code.",
                    "Maintain consistent indentation and variable naming."
                ],
            }

            print("[ReviewerAgent] Review complete! âœ…")
            print(json.dumps(feedback, indent=4))

            return feedback

        except FileNotFoundError:
            print(f"Error: Report file not found at {report_path}")
        except json.JSONDecodeError:
            print(f"Error: Could not decode JSON from {report_path}")
        except Exception as e:
            print(f"Unexpected error in ReviewerAgent: {e}")

if __name__ == "__main__":
    # Temporary test block
    import json
    import os

    # Simulate a report (like one generated by orchestrator)
    sample_report = {
        "file": "test_files/test_code.py",
        "issues": [
            {"type": "convention", "message": "Missing function docstring"},
            {"type": "warning", "message": "Unused import"}
        ]
    }

    # Save it to a test file
    test_report_path = "sample_report.json"
    with open(test_report_path, "w", encoding="utf-8") as f:
        json.dump(sample_report, f, indent=4)

    # Run reviewer agent
    agent = ReviewerAgent()
    feedback = agent.run(test_report_path)

    # Clean up test file
    os.remove(test_report_path)
